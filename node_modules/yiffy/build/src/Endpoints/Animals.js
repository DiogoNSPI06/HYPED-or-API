"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../util/Constants");
const ErrorHandler_1 = __importDefault(require("../util/ErrorHandler"));
const get_1 = __importDefault(require("../util/get"));
const perf_hooks_1 = require("perf_hooks");
class Animals {
    options;
    constructor(d) {
        if (!d)
            d = {};
        this.options = {
            userAgent: d.userAgent || Constants_1.USER_AGENT,
            apiKey: d.apiKey || "",
            debug: d.debug || (() => null),
            baseURL: d.baseURL || Constants_1.API_URL,
            host: d.host || Constants_1.API_HOST
        };
    }
    async sendRequest(cat, method, amount, maxImageSize) {
        if (!cat)
            throw new TypeError("missing category");
        if (!method)
            method = "json";
        method = method.toLowerCase();
        if (["image"].includes(method) && amount && amount > 1)
            throw new TypeError("Ammount cannot be greater than one when requesting an image or stream.");
        if (amount && amount > 5)
            throw new TypeError("Amount cannot be greater than five.");
        const h = {};
        if (this.options.apiKey)
            h.Authorization = this.options.apiKey;
        switch (method) {
            case "image": {
                const start = perf_hooks_1.performance.now();
                const r = await get_1.default(`${this.options.baseURL}/${Constants_1.API_VERSION}/animals/${cat}/image?notes=disabled${maxImageSize ? `&sizeLimit=${maxImageSize}` : ""}`, this.options.userAgent, this.options.apiKey);
                const end = perf_hooks_1.performance.now();
                if (r.statusCode !== 200) {
                    const e = ErrorHandler_1.default(r.statusCode);
                    if (!e)
                        throw new TypeError(`Non 200-OK status code returned from api: ${r.statusCode} ${r.statusMessage}`);
                    else
                        throw new TypeError(e);
                }
                const d = {
                    artists: [],
                    sources: [],
                    width: 0,
                    height: 0,
                    url: "",
                    shortURL: "",
                    reportURL: "",
                    type: "",
                    name: "",
                    ext: "",
                    size: 0
                };
                // I'm not sure if the any spam or this is better,
                // both are type abuse
                Object.keys(r.headers).map((hr) => {
                    if (Object.values(Constants_1.API_HEADERS).includes(hr[0])) {
                        const n = Object.keys(Constants_1.API_HEADERS)[Object.values(Constants_1.API_HEADERS).indexOf(hr)];
                        if (d[n] instanceof Array)
                            d[n].push(...(Array.isArray(r.headers[hr]) ? r.headers[hr] : [r.headers[hr]]));
                        else if (typeof d[n] === "number")
                            d[n] = Number(r.headers[hr]);
                        else
                            d[n] = r.headers[hr];
                    }
                });
                if (r.statusCode !== 200) {
                    let v;
                    try {
                        v = JSON.parse(r.body.toString());
                    }
                    catch (e) {
                        v = r.body.toString();
                    }
                    const e = ErrorHandler_1.default(r.statusCode);
                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                    if (!e)
                        throw new TypeError(`Non 200-OK status code returned from api: ${r.statusCode} ${r.statusMessage} (${typeof v === "string" ? v : v.error})`);
                    else
                        throw new TypeError(e);
                }
                this.debug(`${this.options.baseURL}/${Constants_1.API_VERSION}/animals/${cat}/image?notes=disabled${maxImageSize ? `&sizeLimit=${maxImageSize}` : ""}`, { start, end, time: parseFloat((end - start).toFixed(2)) });
                return {
                    image: r.body,
                    data: d
                };
                break;
            }
            case "json": {
                const start = perf_hooks_1.performance.now();
                const r = await get_1.default(`${this.options.baseURL}/${Constants_1.API_VERSION}/animals/${cat}?notes=disabled${maxImageSize ? `&sizeLimit=${maxImageSize}` : ""}`, this.options.userAgent, this.options.apiKey);
                const end = perf_hooks_1.performance.now();
                if (r.statusCode !== 200) {
                    let v;
                    try {
                        v = JSON.parse(r.body.toString());
                    }
                    catch (e) {
                        v = r.body.toString();
                    }
                    const e = ErrorHandler_1.default(r.statusCode);
                    if (!e)
                        throw new TypeError(`Non 200-OK status code returned from api: ${r.statusCode} ${r.statusMessage} (${typeof v === "string" ? v : v.error})`);
                    else
                        throw new TypeError(e);
                }
                let b;
                try {
                    b = JSON.parse(r.body.toString());
                }
                catch (e) {
                    throw new TypeError(`Error parsing JSON body: ${e.stack}`);
                }
                this.debug(`${this.options.baseURL}/${Constants_1.API_VERSION}/animals/${cat}?notes=disabled${maxImageSize ? `&sizeLimit=${maxImageSize}` : ""}`, { start, end, time: parseFloat((end - start).toFixed(2)) });
                return amount === 1 ? b.images[0] : b.images;
                break;
            }
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            default: throw new TypeError(`Unknown method "${method}"`);
        }
    }
    get birb() { return this.sendRequest.bind(this, "birb"); }
    get blep() { return this.sendRequest.bind(this, "blep"); }
    get cheeta() { return this.sendRequest.bind(this, "cheeta"); }
    get dikdik() { return this.sendRequest.bind(this, "dikdik"); }
    get fox() { return this.sendRequest.bind(this, "fox"); }
    get lynx() { return this.sendRequest.bind(this, "lynx"); }
    get wolf() { return this.sendRequest.bind(this, "wolf"); }
    get debug() { return this.options.debug; }
}
exports.default = Animals;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW5pbWFscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9FbmRwb2ludHMvQW5pbWFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGlEQUE0RjtBQUU1Rix3RUFBZ0Q7QUFDaEQsc0RBQThCO0FBQzlCLDJDQUF5QztBQUV6QyxNQUFxQixPQUFPO0lBQzNCLE9BQU8sQ0FBVTtJQUNqQixZQUFZLENBQW9CO1FBQy9CLElBQUksQ0FBQyxDQUFDO1lBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDZCxTQUFTLEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxzQkFBVTtZQUNwQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFO1lBQ3RCLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQzlCLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLG1CQUFPO1lBQzdCLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLG9CQUFRO1NBQ3hCLENBQUM7SUFDSCxDQUFDO0lBS08sS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFvQixFQUFFLE1BQXlCLEVBQUUsTUFBMEIsRUFBRSxZQUFxQjtRQUMzSCxJQUFJLENBQUMsR0FBRztZQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsTUFBTTtZQUFFLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDN0IsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQW1CLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLElBQUksTUFBTSxHQUFHLENBQUM7WUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLHdFQUF3RSxDQUFDLENBQUM7UUFDdEosSUFBSSxN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